{
  "address": "0x5FbDB2315678afecb367f032d93F642f64180aa3",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "DepositToExchangeRequest",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "walletContractAddress",
          "type": "address"
        }
      ],
      "name": "NewWallet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "WithdrawFromExchangeRequest",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "salt",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "arg",
          "type": "uint256"
        }
      ],
      "name": "createDSalted",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        }
      ],
      "name": "depositToExchangeRequest",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "num",
          "type": "uint256"
        }
      ],
      "name": "newWallet",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "userWallet",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "withdrawFromExchangeRequest",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    }
  ],
  "transactionHash": "0xf559aca0330ccc1def8737962ce49c0e33715b330e65ed78aa9ce64763c8638e",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x5FbDB2315678afecb367f032d93F642f64180aa3",
    "transactionIndex": 0,
    "gasUsed": "1333140",
    "logsBloom": "0x
    "blockHash": "0x1e1757192489ee32f5c72953fc1e930e738ba89cddbc5a0ac494105546b8c81f",
    "transactionHash": "0xf559aca0330ccc1def8737962ce49c0e33715b330e65ed78aa9ce64763c8638e",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 1,
        "transactionHash": "0xf559aca0330ccc1def8737962ce49c0e33715b330e65ed78aa9ce64763c8638e",
        "address": "0x5FbDB2315678afecb367f032d93F642f64180aa3",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x1e1757192489ee32f5c72953fc1e930e738ba89cddbc5a0ac494105546b8c81f"
      }
    ],
    "blockNumber": 1,
    "cumulativeGasUsed": "1333140",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "46e399078d360472a170fea37d4ee688",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"DepositToExchangeRequest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"walletContractAddress\",\"type\":\"address\"}],\"name\":\"NewWallet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"WithdrawFromExchangeRequest\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"arg\",\"type\":\"uint256\"}],\"name\":\"createDSalted\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"}],\"name\":\"depositToExchangeRequest\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"num\",\"type\":\"uint256\"}],\"name\":\"newWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"userWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"withdrawFromExchangeRequest\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ExchangeModerator.sol\":\"ExchangeModerator\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == _ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0xa535a5df777d44e945dd24aa43a11e44b024140fc340ad0dfe42acf4002aade1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/ExchangeModerator.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.17;\\n\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"./Wallet.sol\\\";\\n\\ncontract ExchangeModerator is Ownable,ReentrancyGuard {\\n\\n    event WithdrawFromExchangeRequest(address to, uint256 amount);\\n    event DepositToExchangeRequest(address from, uint256 amount);\\n    event NewWallet(address owner, address walletContractAddress);\\n\\n    constructor() {\\n    }\\n\\n\\n    mapping (address => uint256) private balances;\\n    mapping (address => address) private userToWallet;\\n\\n    function withdrawFromExchangeRequest(address to) external payable{\\n        emit WithdrawFromExchangeRequest(to, msg.value);\\n    }\\n\\n    function depositToExchangeRequest(address from) external payable{\\n        emit WithdrawFromExchangeRequest(from, msg.value);\\n    }\\n\\n    function newWallet(/*bytes32 _salt*/uint256 num) external{\\n        bytes32 _salt = bytes32(num);\\n        Wallet wallet = (new Wallet){salt: _salt}(address(this),1e19);\\n        userToWallet[msg.sender] = address(wallet);\\n        // return address(wallet);\\n        emit NewWallet(msg.sender, address(wallet));\\n\\n    }\\n\\n    function userWallet(address user) view public returns (address) {\\n        return userToWallet[user];\\n    }\\n\\n    function createDSalted(bytes32 salt, uint arg) public returns(address){\\n        // This complicated expression just tells you how the address\\n        // can be pre-computed. It is just there for illustration.\\n        // You actually only need ``new D{salt: salt}(arg)``.\\n        address predictedAddress = address(uint160(uint(keccak256(abi.encodePacked(\\n            bytes1(0xff),\\n            address(this),\\n            salt,\\n            keccak256(abi.encodePacked(\\n                type(Wallet).creationCode,\\n                abi.encode(arg)\\n            ))\\n        )))));\\n\\n        Wallet wallet = new Wallet{salt: salt}(address(this),1e19);\\n        require(address(wallet) == predictedAddress);\\n        return predictedAddress;\\n    }\\n\\n}\",\"keccak256\":\"0x038ecec81375438a391a4c76deb77cb524a52b9cc679b971d3fc7a1143b30bb6\",\"license\":\"MIT\"},\"contracts/Wallet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\nimport \\\"./ExchangeModerator.sol\\\";\\n\\ncontract Wallet {\\n    ExchangeModerator target = ExchangeModerator(exchange);\\n\\n    address payable private immutable owner;\\n    address payable private exchange;\\n    uint256 private immutable minimumAmount;\\n\\n    constructor(address _exchange, uint256 _minimumAmount) {\\n        owner = payable(msg.sender);\\n        exchange = payable(_exchange);\\n        minimumAmount = _minimumAmount;\\n    }\\n\\n    receive() external payable {}\\n\\n    function withdraw(uint _amount) external {\\n        require(msg.sender == owner, \\\"caller is not owner\\\");\\n        payable(msg.sender).transfer(_amount);\\n    }\\n\\n    function transfer(address to, uint256 amount) external {\\n        require(amount > balance() && amount > minimumAmount, \\\"Insufficient balance\\\");\\n        (bool success,) = to.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Transaction failed\\\");\\n    }\\n\\n    function depositToExchangeRequest(uint256 amount) external {\\n        require(amount > balance() && amount > minimumAmount, \\\"Insufficient balance\\\");\\n        target.depositToExchangeRequest{value: amount}(msg.sender);\\n    }\\n\\n\\n    function balance() public view returns (uint256) {\\n        return address(this).balance;\\n    }\\n\\n\\n}\\n\",\"keccak256\":\"0x209e9e84d7f4a194a29aa54af9b8878f4753b590c8bee9f52a383978310e460c\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5061002d61002261003960201b60201c565b61004160201b60201c565b60018081905550610105565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b611662806101146000396000f3fe608060405260043610620000865760003560e01c8063d0973e741162000055578063d0973e741462000139578063e46e70701462000159578063f2fde38b1462000187578063fc9dbc6914620001b55762000086565b80630bd38f2f146200008b578063715018a614620000cf5780637b78900514620000e95780638da5cb5b1462000109575b600080fd5b3480156200009857600080fd5b50620000b76004803603810190620000b19190620007d0565b620001f9565b604051620000c691906200085c565b60405180910390f35b348015620000dc57600080fd5b50620000e762000334565b005b620001076004803603810190620001019190620008aa565b6200034c565b005b3480156200011657600080fd5b50620001216200038a565b6040516200013091906200085c565b60405180910390f35b620001576004803603810190620001519190620008aa565b620003b3565b005b3480156200016657600080fd5b506200018560048036038101906200017f9190620008dc565b620003f1565b005b3480156200019457600080fd5b50620001b36004803603810190620001ad9190620008aa565b62000503565b005b348015620001c257600080fd5b50620001e16004803603810190620001db9190620008aa565b6200058d565b604051620001f091906200085c565b60405180910390f35b60008060ff60f81b308560405180602001620002159062000747565b6020820181038252601f19601f82011660405250866040516020016200023c91906200091f565b6040516020818303038152906040526040516020016200025e929190620009b5565b6040516020818303038152906040528051906020012060405160200162000289949392919062000aa3565b6040516020818303038152906040528051906020012060001c905060008430678ac7230489e80000604051620002bf9062000747565b620002cc92919062000b46565b8190604051809103906000f5905080158015620002ed573d6000803e3d6000fd5b5090508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16146200032957600080fd5b819250505092915050565b6200033e620005f6565b6200034a60006200067b565b565b7f96ba817cac5a6c63b464758584632a2c918aa59cb6652b8b9fd8a3b721f064e481346040516200037f92919062000b73565b60405180910390a150565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b7f96ba817cac5a6c63b464758584632a2c918aa59cb6652b8b9fd8a3b721f064e48134604051620003e692919062000b73565b60405180910390a150565b60008160001b905060008130678ac7230489e80000604051620004149062000747565b6200042192919062000b46565b8190604051809103906000f590508015801562000442573d6000803e3d6000fd5b50905080600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507fad99b4cdeb342f8df51bd1f7c20113a98559ff13b06d1c77cc051964d7489d2b3382604051620004f692919062000ba0565b60405180910390a1505050565b6200050d620005f6565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036200057f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620005769062000c54565b60405180910390fd5b6200058a816200067b565b50565b6000600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b620006006200073f565b73ffffffffffffffffffffffffffffffffffffffff16620006206200038a565b73ffffffffffffffffffffffffffffffffffffffff161462000679576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620006709062000cc6565b60405180910390fd5b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600033905090565b6109448062000ce983390190565b600080fd5b6000819050919050565b6200076f816200075a565b81146200077b57600080fd5b50565b6000813590506200078f8162000764565b92915050565b6000819050919050565b620007aa8162000795565b8114620007b657600080fd5b50565b600081359050620007ca816200079f565b92915050565b60008060408385031215620007ea57620007e962000755565b5b6000620007fa858286016200077e565b92505060206200080d85828601620007b9565b9150509250929050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620008448262000817565b9050919050565b620008568162000837565b82525050565b60006020820190506200087360008301846200084b565b92915050565b620008848162000837565b81146200089057600080fd5b50565b600081359050620008a48162000879565b92915050565b600060208284031215620008c357620008c262000755565b5b6000620008d38482850162000893565b91505092915050565b600060208284031215620008f557620008f462000755565b5b60006200090584828501620007b9565b91505092915050565b620009198162000795565b82525050565b60006020820190506200093660008301846200090e565b92915050565b600081519050919050565b600081905092915050565b60005b838110156200097257808201518184015260208101905062000955565b60008484015250505050565b60006200098b826200093c565b62000997818562000947565b9350620009a981856020860162000952565b80840191505092915050565b6000620009c382856200097e565b9150620009d182846200097e565b91508190509392505050565b60007fff0000000000000000000000000000000000000000000000000000000000000082169050919050565b6000819050919050565b62000a2862000a2282620009dd565b62000a09565b82525050565b60008160601b9050919050565b600062000a488262000a2e565b9050919050565b600062000a5c8262000a3b565b9050919050565b62000a7862000a728262000837565b62000a4f565b82525050565b6000819050919050565b62000a9d62000a97826200075a565b62000a7e565b82525050565b600062000ab1828762000a13565b60018201915062000ac3828662000a63565b60148201915062000ad5828562000a88565b60208201915062000ae7828462000a88565b60208201915081905095945050505050565b6000819050919050565b6000819050919050565b600062000b2e62000b2862000b228462000af9565b62000b03565b62000795565b9050919050565b62000b408162000b0d565b82525050565b600060408201905062000b5d60008301856200084b565b62000b6c602083018462000b35565b9392505050565b600060408201905062000b8a60008301856200084b565b62000b9960208301846200090e565b9392505050565b600060408201905062000bb760008301856200084b565b62000bc660208301846200084b565b9392505050565b600082825260208201905092915050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b600062000c3c60268362000bcd565b915062000c498262000bde565b604082019050919050565b6000602082019050818103600083015262000c6f8162000c2d565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b600062000cae60208362000bcd565b915062000cbb8262000c76565b602082019050919050565b6000602082019050818103600083015262000ce18162000c9f565b905091905056fe60c0604052600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555034801561007257600080fd5b50604051610944380380610944833981810160405281019061009491906101b1565b3373ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff168152505081600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508060a0818152505050506101f1565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006101488261011d565b9050919050565b6101588161013d565b811461016357600080fd5b50565b6000815190506101758161014f565b92915050565b6000819050919050565b61018e8161017b565b811461019957600080fd5b50565b6000815190506101ab81610185565b92915050565b600080604083850312156101c8576101c7610118565b5b60006101d685828601610166565b92505060206101e78582860161019c565b9150509250929050565b60805160a05161072861021c600039600081816101e001526102e30152600060f701526107286000f3fe6080604052600436106100435760003560e01c80632e1a7d4d1461004f578063984838ab14610078578063a9059cbb146100a1578063b69ef8a8146100ca5761004a565b3661004a57005b600080fd5b34801561005b57600080fd5b5061007660048036038101906100719190610438565b6100f5565b005b34801561008457600080fd5b5061009f600480360381019061009a9190610438565b6101cd565b005b3480156100ad57600080fd5b506100c860048036038101906100c391906104c3565b6102d0565b005b3480156100d657600080fd5b506100df6103f5565b6040516100ec9190610512565b60405180910390f35b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610183576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161017a9061058a565b60405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f193505050501580156101c9573d6000803e3d6000fd5b5050565b6101d56103f5565b8111801561020257507f000000000000000000000000000000000000000000000000000000000000000081115b610241576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610238906105f6565b60405180910390fd5b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16637b78900582336040518363ffffffff1660e01b815260040161029b9190610625565b6000604051808303818588803b1580156102b457600080fd5b505af11580156102c8573d6000803e3d6000fd5b505050505050565b6102d86103f5565b8111801561030557507f000000000000000000000000000000000000000000000000000000000000000081115b610344576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161033b906105f6565b60405180910390fd5b60008273ffffffffffffffffffffffffffffffffffffffff168260405161036a90610671565b60006040518083038185875af1925050503d80600081146103a7576040519150601f19603f3d011682016040523d82523d6000602084013e6103ac565b606091505b50509050806103f0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103e7906106d2565b60405180910390fd5b505050565b600047905090565b600080fd5b6000819050919050565b61041581610402565b811461042057600080fd5b50565b6000813590506104328161040c565b92915050565b60006020828403121561044e5761044d6103fd565b5b600061045c84828501610423565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061049082610465565b9050919050565b6104a081610485565b81146104ab57600080fd5b50565b6000813590506104bd81610497565b92915050565b600080604083850312156104da576104d96103fd565b5b60006104e8858286016104ae565b92505060206104f985828601610423565b9150509250929050565b61050c81610402565b82525050565b60006020820190506105276000830184610503565b92915050565b600082825260208201905092915050565b7f63616c6c6572206973206e6f74206f776e657200000000000000000000000000600082015250565b600061057460138361052d565b915061057f8261053e565b602082019050919050565b600060208201905081810360008301526105a381610567565b9050919050565b7f496e73756666696369656e742062616c616e6365000000000000000000000000600082015250565b60006105e060148361052d565b91506105eb826105aa565b602082019050919050565b6000602082019050818103600083015261060f816105d3565b9050919050565b61061f81610485565b82525050565b600060208201905061063a6000830184610616565b92915050565b600081905092915050565b50565b600061065b600083610640565b91506106668261064b565b600082019050919050565b600061067c8261064e565b9150819050919050565b7f5472616e73616374696f6e206661696c65640000000000000000000000000000600082015250565b60006106bc60128361052d565b91506106c782610686565b602082019050919050565b600060208201905081810360008301526106eb816106af565b905091905056fea26469706673582212207ea27c73dd258648382d969314b96988cbed6ac0e93a7942ce9a5ff6e8c8dfe064736f6c63430008110033a264697066735822122034b872155b3777d4bec11a008454b32e3642ed2c1fc52c8033e412a74621577564736f6c63430008110033",
  "deployedBytecode": "0x608060405260043610620000865760003560e01c8063d0973e741162000055578063d0973e741462000139578063e46e70701462000159578063f2fde38b1462000187578063fc9dbc6914620001b55762000086565b80630bd38f2f146200008b578063715018a614620000cf5780637b78900514620000e95780638da5cb5b1462000109575b600080fd5b3480156200009857600080fd5b50620000b76004803603810190620000b19190620007d0565b620001f9565b604051620000c691906200085c565b60405180910390f35b348015620000dc57600080fd5b50620000e762000334565b005b620001076004803603810190620001019190620008aa565b6200034c565b005b3480156200011657600080fd5b50620001216200038a565b6040516200013091906200085c565b60405180910390f35b620001576004803603810190620001519190620008aa565b620003b3565b005b3480156200016657600080fd5b506200018560048036038101906200017f9190620008dc565b620003f1565b005b3480156200019457600080fd5b50620001b36004803603810190620001ad9190620008aa565b62000503565b005b348015620001c257600080fd5b50620001e16004803603810190620001db9190620008aa565b6200058d565b604051620001f091906200085c565b60405180910390f35b60008060ff60f81b308560405180602001620002159062000747565b6020820181038252601f19601f82011660405250866040516020016200023c91906200091f565b6040516020818303038152906040526040516020016200025e929190620009b5565b6040516020818303038152906040528051906020012060405160200162000289949392919062000aa3565b6040516020818303038152906040528051906020012060001c905060008430678ac7230489e80000604051620002bf9062000747565b620002cc92919062000b46565b8190604051809103906000f5905080158015620002ed573d6000803e3d6000fd5b5090508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16146200032957600080fd5b819250505092915050565b6200033e620005f6565b6200034a60006200067b565b565b7f96ba817cac5a6c63b464758584632a2c918aa59cb6652b8b9fd8a3b721f064e481346040516200037f92919062000b73565b60405180910390a150565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b7f96ba817cac5a6c63b464758584632a2c918aa59cb6652b8b9fd8a3b721f064e48134604051620003e692919062000b73565b60405180910390a150565b60008160001b905060008130678ac7230489e80000604051620004149062000747565b6200042192919062000b46565b8190604051809103906000f590508015801562000442573d6000803e3d6000fd5b50905080600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507fad99b4cdeb342f8df51bd1f7c20113a98559ff13b06d1c77cc051964d7489d2b3382604051620004f692919062000ba0565b60405180910390a1505050565b6200050d620005f6565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036200057f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620005769062000c54565b60405180910390fd5b6200058a816200067b565b50565b6000600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b620006006200073f565b73ffffffffffffffffffffffffffffffffffffffff16620006206200038a565b73ffffffffffffffffffffffffffffffffffffffff161462000679576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620006709062000cc6565b60405180910390fd5b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600033905090565b6109448062000ce983390190565b600080fd5b6000819050919050565b6200076f816200075a565b81146200077b57600080fd5b50565b6000813590506200078f8162000764565b92915050565b6000819050919050565b620007aa8162000795565b8114620007b657600080fd5b50565b600081359050620007ca816200079f565b92915050565b60008060408385031215620007ea57620007e962000755565b5b6000620007fa858286016200077e565b92505060206200080d85828601620007b9565b9150509250929050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620008448262000817565b9050919050565b620008568162000837565b82525050565b60006020820190506200087360008301846200084b565b92915050565b620008848162000837565b81146200089057600080fd5b50565b600081359050620008a48162000879565b92915050565b600060208284031215620008c357620008c262000755565b5b6000620008d38482850162000893565b91505092915050565b600060208284031215620008f557620008f462000755565b5b60006200090584828501620007b9565b91505092915050565b620009198162000795565b82525050565b60006020820190506200093660008301846200090e565b92915050565b600081519050919050565b600081905092915050565b60005b838110156200097257808201518184015260208101905062000955565b60008484015250505050565b60006200098b826200093c565b62000997818562000947565b9350620009a981856020860162000952565b80840191505092915050565b6000620009c382856200097e565b9150620009d182846200097e565b91508190509392505050565b60007fff0000000000000000000000000000000000000000000000000000000000000082169050919050565b6000819050919050565b62000a2862000a2282620009dd565b62000a09565b82525050565b60008160601b9050919050565b600062000a488262000a2e565b9050919050565b600062000a5c8262000a3b565b9050919050565b62000a7862000a728262000837565b62000a4f565b82525050565b6000819050919050565b62000a9d62000a97826200075a565b62000a7e565b82525050565b600062000ab1828762000a13565b60018201915062000ac3828662000a63565b60148201915062000ad5828562000a88565b60208201915062000ae7828462000a88565b60208201915081905095945050505050565b6000819050919050565b6000819050919050565b600062000b2e62000b2862000b228462000af9565b62000b03565b62000795565b9050919050565b62000b408162000b0d565b82525050565b600060408201905062000b5d60008301856200084b565b62000b6c602083018462000b35565b9392505050565b600060408201905062000b8a60008301856200084b565b62000b9960208301846200090e565b9392505050565b600060408201905062000bb760008301856200084b565b62000bc660208301846200084b565b9392505050565b600082825260208201905092915050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b600062000c3c60268362000bcd565b915062000c498262000bde565b604082019050919050565b6000602082019050818103600083015262000c6f8162000c2d565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b600062000cae60208362000bcd565b915062000cbb8262000c76565b602082019050919050565b6000602082019050818103600083015262000ce18162000c9f565b905091905056fe60c0604052600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555034801561007257600080fd5b50604051610944380380610944833981810160405281019061009491906101b1565b3373ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff168152505081600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508060a0818152505050506101f1565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006101488261011d565b9050919050565b6101588161013d565b811461016357600080fd5b50565b6000815190506101758161014f565b92915050565b6000819050919050565b61018e8161017b565b811461019957600080fd5b50565b6000815190506101ab81610185565b92915050565b600080604083850312156101c8576101c7610118565b5b60006101d685828601610166565b92505060206101e78582860161019c565b9150509250929050565b60805160a05161072861021c600039600081816101e001526102e30152600060f701526107286000f3fe6080604052600436106100435760003560e01c80632e1a7d4d1461004f578063984838ab14610078578063a9059cbb146100a1578063b69ef8a8146100ca5761004a565b3661004a57005b600080fd5b34801561005b57600080fd5b5061007660048036038101906100719190610438565b6100f5565b005b34801561008457600080fd5b5061009f600480360381019061009a9190610438565b6101cd565b005b3480156100ad57600080fd5b506100c860048036038101906100c391906104c3565b6102d0565b005b3480156100d657600080fd5b506100df6103f5565b6040516100ec9190610512565b60405180910390f35b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610183576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161017a9061058a565b60405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f193505050501580156101c9573d6000803e3d6000fd5b5050565b6101d56103f5565b8111801561020257507f000000000000000000000000000000000000000000000000000000000000000081115b610241576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610238906105f6565b60405180910390fd5b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16637b78900582336040518363ffffffff1660e01b815260040161029b9190610625565b6000604051808303818588803b1580156102b457600080fd5b505af11580156102c8573d6000803e3d6000fd5b505050505050565b6102d86103f5565b8111801561030557507f000000000000000000000000000000000000000000000000000000000000000081115b610344576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161033b906105f6565b60405180910390fd5b60008273ffffffffffffffffffffffffffffffffffffffff168260405161036a90610671565b60006040518083038185875af1925050503d80600081146103a7576040519150601f19603f3d011682016040523d82523d6000602084013e6103ac565b606091505b50509050806103f0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103e7906106d2565b60405180910390fd5b505050565b600047905090565b600080fd5b6000819050919050565b61041581610402565b811461042057600080fd5b50565b6000813590506104328161040c565b92915050565b60006020828403121561044e5761044d6103fd565b5b600061045c84828501610423565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061049082610465565b9050919050565b6104a081610485565b81146104ab57600080fd5b50565b6000813590506104bd81610497565b92915050565b600080604083850312156104da576104d96103fd565b5b60006104e8858286016104ae565b92505060206104f985828601610423565b9150509250929050565b61050c81610402565b82525050565b60006020820190506105276000830184610503565b92915050565b600082825260208201905092915050565b7f63616c6c6572206973206e6f74206f776e657200000000000000000000000000600082015250565b600061057460138361052d565b915061057f8261053e565b602082019050919050565b600060208201905081810360008301526105a381610567565b9050919050565b7f496e73756666696369656e742062616c616e6365000000000000000000000000600082015250565b60006105e060148361052d565b91506105eb826105aa565b602082019050919050565b6000602082019050818103600083015261060f816105d3565b9050919050565b61061f81610485565b82525050565b600060208201905061063a6000830184610616565b92915050565b600081905092915050565b50565b600061065b600083610640565b91506106668261064b565b600082019050919050565b600061067c8261064e565b9150819050919050565b7f5472616e73616374696f6e206661696c65640000000000000000000000000000600082015250565b60006106bc60128361052d565b91506106c782610686565b602082019050919050565b600060208201905081810360008301526106eb816106af565b905091905056fea26469706673582212207ea27c73dd258648382d969314b96988cbed6ac0e93a7942ce9a5ff6e8c8dfe064736f6c63430008110033a264697066735822122034b872155b3777d4bec11a008454b32e3642ed2c1fc52c8033e412a74621577564736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/ExchangeModerator.sol:ExchangeModerator",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 123,
        "contract": "contracts/ExchangeModerator.sol:ExchangeModerator",
        "label": "_status",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 234,
        "contract": "contracts/ExchangeModerator.sol:ExchangeModerator",
        "label": "balances",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 238,
        "contract": "contracts/ExchangeModerator.sol:ExchangeModerator",
        "label": "userToWallet",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_address)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}