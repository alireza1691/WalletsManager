{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/security/ReentrancyGuard.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        _nonReentrantBefore();\n        _;\n        _nonReentrantAfter();\n    }\n\n    function _nonReentrantBefore() private {\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n    }\n\n    function _nonReentrantAfter() private {\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Returns true if the reentrancy guard is currently set to \"entered\", which indicates there is a\n     * `nonReentrant` function in the call stack.\n     */\n    function _reentrancyGuardEntered() internal view returns (bool) {\n        return _status == _ENTERED;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "contracts/ExchangePool.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.17;\n\nimport \"./PolygonWalletsManager.sol\";\n\ncontract ExchangePool {\n\nPolygonWalletsManager target = PolygonWalletsManager(walletsManager);\n\naddress payable private walletsManager;\naddress private allowedAddress;\n\nconstructor (address _walletsManager, address _allowedAddress) {\n    walletsManager = payable(_walletsManager);\n    allowedAddress = _allowedAddress;\n}\n\nmodifier allowed {\n    require(msg.sender == allowedAddress, \"Not allowed\");\n    _;\n}\n\nfunction payWithdrawalByAddress (address to) payable external allowed{\n    // target.withdrawalSucceed(to, msg.value);\n    target.deposit{value: msg.value}(to);\n}\n\nfunction payWithdrawalByContract(address to, uint256 amount)  external allowed{\n    // target.withdrawalSucceed(to, amount);\n    target.deposit{value: amount}(to);\n}\n\nreceive() external payable{}\n\n}"
    },
    "contracts/PolygonWalletsManager.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.17;\n\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\ncontract PolygonWalletsManager is Ownable,ReentrancyGuard {\n\n    /// @notice Explain to an end user what this does\n    /// @dev Explain to a developer any extra details\n    /// param Documents a parameter just like in doxygen (must be followed by parameter name)\n\n\n    // ****************************************************\n    // ********************** Events **********************\n    // ****************************************************\n\n    /// @notice Explain to an end user what this does\n    /// @dev Explain to a developer any extra details\n    /// @param to a parameter just like in doxygen (must be followed by parameter name)\n    event Deposit(address to, uint256 amount);\n    event Transfer(address from, address to, uint256 amount);\n    event InternalTransfer(address from, address to, uint256 amount);\n    event WithdrawFromExchangeRequest(address to, uint256 amount);\n    event DepositToExchangeRequest(address from, uint256 amount);\n    event CancelDepositRequest(address from, uint256 amount);\n    event WithdrawRequestSucceed(address to, uint256 amount);\n    // event Deposit(address to, uint256 amount);\n\n\n    // ****************************************************\n    // ******************** Variables *********************\n    // ****************************************************\n\n    uint256 private immutable minAmount;\n    uint8 private immutable fee;\n    uint256 private income;\n\n    // ****************************************************\n    // ******************* Constructor ********************\n    // ****************************************************\n\n\n    constructor(uint256 _minAmount, uint8 _fee) {\n        minAmount = _minAmount;\n        fee = _fee;\n    }\n\n    // ****************************************************\n    // ********************* Modifiers *********************\n    // ****************************************************\n\n    // modifier onlyExchange {\n    //     require(msg.sender == exchangePoolAddress, \"onlyExchange can call\");\n    //     _;\n    // }\n\n\n    // ****************************************************\n    // ********************* Mappings *********************\n    // ****************************************************\n\n\n    mapping (address => uint256) private balances;\n    mapping (address => uint256) private pendingAmount;\n\n    // ****************************************************\n    // ********************  functions ********************\n    // ****************************************************\n\n\n    /// @notice Explain to an end user what this does\n    /// @dev Explain to a developer any extra details\n    /// param Documents a parameter just like in doxygen (must be followed by parameter name)\n    /// return Documents the return variables of a contract’s function state variable\n    /// inheritdoc\tCopies all missing tags from the base function (must be followed by the contract name)\n    function deposit(address to) external payable {\n        require(msg.value >= minAmount, \"Amount is under minimum\");\n        balances[msg.sender] += msg.value;\n        // ** If we want to set fee for deposit, we can replace these lines instead:\n        // balances[msg.sender] += _amount(msg.value,fee);\n        // income += msg.value - _amount(msg.value,fee);\n        emit Deposit(to, msg.value);\n    }\n\n    /// @notice Explain to an end user what this does\n    /// @dev Explain to a developer any extra details\n    /// param Documents a parameter just like in doxygen (must be followed by parameter name)\n    /// return Documents the return variables of a contract’s function state variable\n    /// inheritdoc\tCopies all missing tags from the base function (must be followed by the contract name)\n    function withdrawFromExchangeRequest(address to, uint256 amount) external{\n        require(balances[msg.sender] >= amount, \"Insufficient balance\");\n        emit WithdrawFromExchangeRequest(to, amount);\n    }\n\n    function transferToExchangeRequest(uint256 amount) external{\n        require(balances[msg.sender] >= amount, \"Insufficient balance\");\n        balances[msg.sender] -= amount;\n        pendingAmount[msg.sender] += amount;\n        emit DepositToExchangeRequest(msg.sender, amount);\n    }\n\n    /// @notice Explain to an end user what this does\n    /// @dev Explain to a developer any extra details\n    /// param Documents a parameter just like in doxygen (must be followed by parameter name)\n    /// return Documents the return variables of a contract’s function state variable\n    /// inheritdoc\tCopies all missing tags from the base function (must be followed by the contract name)\n    function transfer(address to, uint256 amount) external nonReentrant {\n        require(balances[msg.sender] >= amount, \"Insufficient balance\");\n        balances[msg.sender] -= amount;\n        (bool success,) = to.call{value: _amount(amount, fee)}(\"\");\n        require(success, \"Transaction failed\");\n        income += amount - _amount(amount, fee);\n        emit Transfer(msg.sender, to, amount);\n    }\n\n    /// @notice Explain to an end user what this does\n    /// @dev Explain to a developer any extra details\n    /// param Documents a parameter just like in doxygen (must be followed by parameter name)\n    /// return Documents the return variables of a contract’s function state variable\n    /// inheritdoc\tCopies all missing tags from the base function (must be followed by the contract name)\n    function internalTransfer(address to, uint256 amount) external {\n        require(balances[msg.sender] >= amount, \"Insufficient balance\");\n        balances[msg.sender] -= amount;\n        balances[to] += _amount(amount, fee);\n        income += amount - _amount(amount, fee);\n        emit InternalTransfer(msg.sender, to, amount);\n    }\n\n    /// @notice Explain to an end user what this does\n    /// @dev Explain to a developer any extra details\n    /// param Documents a parameter just like in doxygen (must be followed by parameter name)\n    /// return Documents the return variables of a contract’s function state variable\n    /// inheritdoc\tCopies all missing tags from the base function (must be followed by the contract name)\n    function claimIncome(address to, uint256 amount) external onlyOwner{\n        require(amount <= income, \"amount bigger than income\");\n        (bool success, ) = to.call{value: amount}(\"\");\n        require(success, \"Transaction failed\");\n        income -= amount;\n    }\n\n    /// @notice Explain to an end user what this does\n    /// @dev Explain to a developer any extra details\n    /// param Documents a parameter just like in doxygen (must be followed by parameter name)\n    /// return Documents the return variables of a contract’s function state variable\n    /// inheritdoc\tCopies all missing tags from the base function (must be followed by the contract name)\n\n    // function withdrawalSucceed(address to, uint256 amount) external onlyExchange {\n    //     pendingAmount[to] -= amount;\n    //     emit WithdrawRequestSucceed(to, amount);\n    // }\n\n    // ****************************************************\n    // ****************** View functions ******************\n    // ****************************************************\n\n    function showBalance (address user) view public returns (uint256) {\n        return balances[user];\n    }\n\n    function showIncome() view public returns (uint256) {\n        return income;\n    }\n    // ****************************************************\n    // ****************** Pure functions ******************\n    // ****************************************************\n\n    /// @notice Explain to an end user what this does\n    /// @dev Explain to a developer any extra details\n    /// @param initalAmount amount before calculating fee\n    /// @param txFee the fee that should be deducated(this amount is amount in thousandth)\n    function _amount(uint256 initalAmount ,uint txFee) internal pure returns(uint256) {\n        return (initalAmount * (1000 - txFee)) / 1000;\n    }\n\n\n\n\n    receive() external payable{}\n\n}"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}